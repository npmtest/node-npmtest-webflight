{"/home/travis/build/npmtest/node-npmtest-webflight/test.js":"/* istanbul instrument in package npmtest_webflight */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webflight/lib.npmtest_webflight.js":"/* istanbul instrument in package npmtest_webflight */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webflight = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webflight = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webflight/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webflight && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webflight */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webflight\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webflight.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webflight.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webflight.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webflight.__dirname + '/lib.npmtest_webflight.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/index.js":"'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst child_process = require('child_process')\n\nconst stringifyFiles = require('./lib/stringifyFiles')\nconst createFilesObj = require('./lib/createFilesObj')\nconst hashFilesObj = require('./lib/hashFilesObj')\nconst writeJsUL = require('./lib/writeJsUL')\nconst replaceHtml = require('./lib/replaceHtml')\nconst addStatusBar = require('./lib/addStatusBar')\nconst writeNewHtml = require('./lib/writeNewHtml')\nconst uncommentingEJS = require('./lib/uncommentingEJS')\nlet botGenerator\n\n/**\n* @param {Object} options\n*   siteUrl: String            (required)\n*   assetsPath: Array          (required)\n*   assetsRoute: Array         (required)\n*   routes: Object             (required)\n*   userCount: Number          (optional - defaults to 10)\n*   wfPath: String             (optional - defaults to '/wfPath')\n*   wfRoute: String            (optional - defaults to '/wfRoute')\n*   seedScript: String         (optional - defaults to 'wf-seed.js')\n*   statusBar: Boolean         (optional - defaults to true)\n*   devMode:   Boolean         (option   - defaults to true)\n*\n* @param {string} serverRoot - path to root folder\n*/\n\nfunction WebFlight (options, serverRoot) {\n  Object.keys(options).forEach((key) => {\n    this[key] = options[key]\n  })\n\n  let fileNamesArr = Object.keys(this.routes).map((file) => {\n    return path.basename(this.routes[file])\n  })\n\n  this.count = 0  // non-configurable\n  this.active = false // non-configurable\n  this.fileNames = fileNamesArr // non-configurable\n\n  this.wfPath = options.wfPath || path.join(serverRoot, '/wfPath')  // default\n\n  // TODO: existsSync is deprecated, need alternative\n  if (!fs.existsSync(this.wfPath)) {\n    fs.mkdirSync(this.wfPath)\n    fs.mkdirSync(path.join(this.wfPath, 'js'))\n  }\n\n  this.wfRoute = options.wfRoute || ('/wfRoute')  // default\n\n  this.seedScript = options.seedScript || path.join(this.wfPath, 'js/wf-seed.js')  // default\n\n  this.jsOutputDL = fileNamesArr.map((file) => { // non-configurable\n    if (path.extname(this.routes[file]) === '.html') {\n      file = path.basename(this.routes[file], '.html')\n      return `${this.wfPath}/js/${file}-download.js`\n    } else if (path.extname(this.routes[file]) === '.ejs') {\n      file = path.basename(this.routes[file], '.ejs')\n      return `${this.wfPath}/js/${file}-download.js`\n    }\n  })\n\n  this.htmlOutput = fileNamesArr.map((file) => { // non-configurable\n    return `${this.wfPath}/wf-${file}`\n  })\n\n  this.userCount = options.userCount || 5  // default (redirect)\n  this.prepCount = Math.floor(this.userCount * 0.75)  // non-configurable (start bots)\n  this.stopCount = Math.floor(this.userCount * 0.50)  // non-configurable (kill bots, redirect back)\n\n  this.statusBar = options.statusBar || true // default\n  this.devMode = options.devMode || true // default\n\n  // Require for botGenerator is based on devMode flag\n  setBotGenerator(this.devMode)\n\n  if (!this.siteUrl) showError('siteUrl')\n  if (!this.assetsPath) showError('assetsPath')\n  if (!this.assetsRoute) showError('assetsRoute')\n  if (!this.routes) showError('routes')\n  if (!options) showError('options')\n}\n\nWebFlight.prototype.init = function () {\n  const htmlFiles = Object.keys(this.routes).map((route) => {\n    return this.routes[route]\n  })\n  const htmlStrings = stringifyFiles(htmlFiles)\n  const filesObj = createFilesObj(this.assetsPath, this.assetsRoute)\n  if (this.statusBar) {\n    hashFilesObj(filesObj)\n    .then(writeJsUL.bind(null, this.seedScript, this.siteUrl, this.stopCount))\n    .then(replaceHtml.bind(null, htmlStrings, htmlFiles))\n    .then(addStatusBar.bind(null))\n    .then(uncommentingEJS.bind(null))\n    .then(writeNewHtml.bind(null, this.htmlOutput))\n  } else {\n    hashFilesObj(filesObj)\n    .then(writeJsUL.bind(null, this.seedScript, this.siteUrl, this.stopCount))\n    .then(replaceHtml.bind(null, htmlStrings, htmlFiles))\n    .then(uncommentingEJS.bind(null))\n    .then(writeNewHtml.bind(null, this.htmlOutput))\n  }\n}\n\nWebFlight.prototype.redirect = function (req, res, next) {\n  const destination = req.originalUrl\n\n  if (this.routes[destination]) {\n    res.sendFile(`/${this.wfPath}/wf-${path.basename(this.routes[destination])}`)\n  } else {\n    next()\n  }\n}\n\nWebFlight.prototype.start = function () {\n  // if devMode is false, create screen for Xvfb to run\n  if (!this.devMode) {\n    child_process.exec('export DISPLAY=\\'0:99\\'')\n    child_process.exec('Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &')\n  }\n\n  botGenerator(this.seedScript)\n  this.active = true\n}\n\nWebFlight.prototype.watch = function (req, res, next) {\n  const destination = req.originalUrl\n\n  if (path.extname(destination) === '.html' || path.extname(destination) === '') {\n    ++this.count\n\n    setTimeout(function () { --this.count }.bind(this), 20000)\n  }\n\n  if (destination === '/count.check.4wf') return res.send({count: this.count})\n  if (destination === '/bots.no.longer.seeding.4wf') {\n    this.active = false\n    console.log('bots ending redirect')\n  }\n  if (!this.active && this.count > this.prepCount) this.start()\n  if (this.count > this.userCount) return this.redirect(req, res, next)\n\n  next()\n}\n\nfunction showError (input) {\n  if (input === 'options') console.error('Error: You must enter an options object')\n  else console.log(`Error: WebFlight options object requires \"${input}\" property`)\n}\n\nfunction setBotGenerator (bool) {\n  return bool ? botGenerator = require('./lib/botGeneratorDevMode')\n              : botGenerator = require('./lib/botGenerator')\n}\nmodule.exports = WebFlight\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/stringifyFiles.js":"'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst commentingEJS = require('./commentingEJS')\n\n/**\n * @param {array} filesArray - array of files from route options\n */\nfunction stringifyFiles (filesArray) {\n  if (filesArray.constructor !== Array) filesArray = [filesArray]\n\n  return filesArray.map((file) => {\n    if (path.extname(file) === '.ejs') {\n      const stringFile = fs.readFileSync(file, 'utf8')\n      return commentingEJS(stringFile)\n    } else {\n      return fs.readFileSync(file, 'utf8')\n    }\n  })\n}\n\nmodule.exports = stringifyFiles\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/commentingEJS.js":"\nfunction commentingEJS (file) {\n  return file.replace(/<%([\\w\\W]*?)%>/g, function (match, subMatch) {\n    return '<!-- <%' + subMatch + '%> -->'\n  })\n}\nmodule.exports = commentingEJS\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/createFilesObj.js":"'use strict'\nconst fs = require('fs')\nconst path = require('path')\n\n/**\n * @param {string} | {array} dir - absolute path to directory (or directories) containing content to be seeded\n * @param {string} | {array} route - route (or routes) on the site that will have seeded content\n */\n\nfunction createFilesObj (dir, route) {\n  // TODO: handle edge cases, make errors\n  if (dir.constructor === String) dir = [dir]\n\n  const returnObject = {}\n  let filesArray = []\n\n  dir.forEach((folder) => {\n    // TODO: refactor for fs.readdir\n    const files = fs.readdirSync(folder)\n\n    filesArray = filesArray.concat(files.map((file) => `${folder}/${file}`))\n  })\n\n  const routesArr = route.map((r) => {\n    // each route r in array should conform to the pattern in provided options object\n    if (!r.endsWith('/')) r += '/'\n\n    return r\n  })\n\n  routesArr.forEach((route) => {\n    filesArray.forEach((file) => {\n      returnObject[route + path.basename(file)] = {\n        path: `${file}`\n      }\n    })\n  })\n\n  return returnObject\n}\n\nmodule.exports = createFilesObj\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/hashFilesObj.js":"'use strict'\n\nconst createTorrent = require('create-torrent')\nconst parseTorrent = require('parse-torrent')\n\nfunction hashFilesObj (filesObj) {\n  return new Promise((resolve, reject) => {\n    const hashObj = filesObj\n    const filesArray = Object.keys(filesObj)\n    const filesSrcArray = Object.keys(filesObj).map((file) => {\n      return filesObj[file].path\n    })\n\n    hashFile(filesSrcArray)\n    function hashFile (array) {\n      const fileSrc = array.pop()\n      const file = filesArray.pop()\n\n      createTorrent(fileSrc, (err, torrent) => {\n        if (err) {\n          reject(err)\n          throw err\n        }\n\n        const tor = parseTorrent(torrent)\n        const hash = tor.infoHash\n        const filename = tor.files[0].name\n        const trackers = tor.announce.map((tracker) => {\n          return `tr=${tracker}`\n        }).join('&')\n\n        let magnetURI = `magnet:?xt=urn:btih:${hash}&dn=${filename}&${trackers}`\n\n        hashObj[file].hash = hash\n        hashObj[file].magnet = magnetURI\n\n        if (array.length) {\n          hashFile(array)\n        } else {\n          resolve(hashObj)\n        }\n      })\n    }\n  })\n}\n\nmodule.exports = hashFilesObj\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/writeJsUL.js":"'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction writeJsUL (output, url, stopCount, filesObj) {\n  const allExtsArray = ['.mp4', '.m4v', '.webm', '.m4a', '.mp3', '.wav', '.aac', '.ogg', '.oga', '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.css', '.html', '.js', '.md', '.pdf', '.txt']\n  const filesArray = Object.keys(filesObj).map((files) => {\n    return filesObj[files].fileOnServer\n  })\n  let totalSeeds = 0\n  let jsString = 'var http = require(\"http\");\\n var WebTorrent = require(\"webtorrent\");\\n' + 'var client = new WebTorrent();\\n'\n\n\n\n  filesArray.forEach((file) => {\n    if (allExtsArray.indexOf(path.extname(file)) < 0) return\n    if (!jsString.includes(file)) {\n      totalSeeds++\n      jsString += `\n\n      client.seed('${file}', function(torrent) {\n        --totalSeeds;\n        console.log('🐣 ', torrent.files[0].name, ' now seeding at hash ', torrent.infoHash);\n\n        if (!totalSeeds) console.log(\"🕊 all seeds active\")\n      });`\n    }\n  })\n\n  jsString += 'console.log(\"⌛️ \", \"waiting on \", totalSeeds, \" seeds...\");'\n  jsString += `setInterval(function() {\n    http.get('${url}/count.check.4wf', function(response) {\n      response.on('data', function(data) {\n        data = JSON.parse(data);\n\n        if (data.count < ${stopCount}) {\n          console.log(\"😴 bots going offline\")\n          http.get('${url}/bots.no.longer.seeding.4wf')\n          require('remote').require('app').quit()\n        }\n      });\n    });\n  }, 600000);`\n\n  jsString = `var totalSeeds = ${totalSeeds};` + '\\n' + `console.log('xurls', ${process.env.GAE_APPENGINE_HOSTNAME})` + '\\n' + jsString\n\n  fs.writeFileSync(output, jsString, 'utf8')\n\n  return filesObj\n}\n\nmodule.exports = writeJsUL\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/replaceHtml.js":"'use strict'\n\nconst cheerio = require('cheerio')\n\nfunction replaceHtml (htmlStringsArray, seedObj) {\n  const htmlStrings = htmlStringsArray.map((htmlString, index) => {\n    let dlScript = `\n    <script>\n      var client = new WebTorrent();\n\n      client.add('${seedObj[index].magnet}', function(torrent) {\n        torrent.files.forEach(file, index) {\n          file.getBlobURL(function(err, url) {\n            if (err) console.log(err);\n\n            var elementsArray = [].slice.call(document.getElementsByClassName('${seedObj[index].hash}' + index));\n            elementsArray.forEach(function(element) {\n              element.src = url;\n            });\n          });\n        }\n      });\n    </script>`\n\n    const $ = cheerio.load(htmlString)\n    const $src = $('body').find('[src]')\n\n    $src.each((i, elem) => {\n      const src = $(elem).attr('src')\n      const fileIndex = seedObj[index].srcs.indexOf(src)\n\n      if (fileIndex > -1) {\n        $(elem).removeAttr('src')\n        $(elem).addClass(seedObj[index].hash + fileIndex)\n      }\n    })\n\n    $('body').append('<script src=\"https://cdn.jsdelivr.net/webtorrent/latest/webtorrent.min.js\"></script>')\n    $('body').append(dlScript)\n\n    return $.html()\n  })\n  return [htmlStrings, seedObj]\n}\n\nmodule.exports = replaceHtml\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/addStatusBar.js":"'use strict'\n\nconst cheerio = require('cheerio')\nconst path = require('path')\n\nfunction addStatusBar (infoArray) {\n  const fileHashArr = Array.from(new Set(Object.keys(infoArray[1]).map((asset) => {\n    return infoArray[1][asset].hash\n  })))\n\n  return infoArray[0].map((htmlString) => {\n    const $ = cheerio.load(htmlString)\n    $('body').append(`<div id=\"webflight-loading-ui\" style=\"position: absolute; top: 0; right: 0;\"><div id=\"webflight-close\" style=\"dispay: block; float: right; background: #931f1f; color: white; font-size: 12px; text-align: center; height: 20px; width: 50px; padding: 10px 0px; cursor: pointer; font-family: sans-serif;\"><strong>Close</strong></div><div id=\"webflight-open-button\" style=\"display: block; float: left; height: 20px; width: 230px; padding: 10px; text-align: center; background: #728BAC; color: white; cursor: pointer; font-family: sans-serif\"><strong>WebFlight Status</strong></div><div id=\"webflight-seed\" style=\"clear:both; max-height: 300px; overflow-y: scroll; width: 270px; background: white; padding: 15px; text-align: left; display: none; font-family: sans-serif;\">You are downloading and seeding the following files:</div></div>\n  <script>\n    $(document).ready(function() {\n      $('#webflight-close').click(function() {\n        $('#webflight-open-button, #webflight-close, #webflight-seed').hide();\n      })\n      $('#webflight-open-button').click(function() {\n        $('#webflight-seed').slideToggle();\n      })\n    })\n  </script>`)\n\n    // TODO: Refactoring\n\n    let elementArray = []\n    let uniqObj = {}\n\n    fileHashArr.forEach((hash) => {\n      let element = $(`.${hash}`)\n      if (element.length) {\n        for (let file in infoArray[1]) {\n          if (infoArray[1][file].hash === hash) {\n            elementArray.push({file: file, hash: hash})\n          }\n        }\n      }\n    })\n\n    elementArray.forEach((item) => {\n      if (!uniqObj[item.hash]) {\n        $('#webflight-seed').append(`<div style=\"font-family: sans-serif\"><br><br><strong>'${path.basename(item.file)}'</strong> at hash: <span style=\"font-size: 12px; font-weight: bold;\"><br>${item.hash}</span></div>`)\n        uniqObj[item.hash] = true\n      }\n    })\n    return $.html()\n  })\n}\n\nmodule.exports = addStatusBar\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/writeNewHtml.js":"'use strict'\n\nconst fs = require('fs')\n\n// TODO: check to see if info resolving from previous function still works\n\nfunction writeNewHtml (fileNames, htmlStrings) {\n  htmlStrings[0].forEach((htmlString, index) => {\n    fs.writeFileSync(fileNames[index], htmlString, 'utf8')\n  })\n}\n\nmodule.exports = writeNewHtml\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/uncommentingEJS.js":"'use strict'\n\nfunction uncommentingEJS (strings) {\n  return strings.map((everyEjsString) => {\n    return everyEjsString.replace(/<!-- <%([\\w\\W]*?)%> -->/g, (match, subMatch) => { return '<%' + subMatch + '%>' })\n  })\n}\n\nmodule.exports = uncommentingEJS\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/botGeneratorDevMode.js":"const spawn = require('electron-spawn')\n\nfunction botGeneratorDev (seedScript) {\n  console.log('starting bot 🤖')\n  const electron = spawn(seedScript, {\n    detached: true\n  })\n  /**\n  * Because of a known bug in chromium, the following code prints a wall of errors.\n  * This should be uncommented when the issue is resolved. See here for details:\n  *   https://bugs.chromium.org/p/chromium/issues/detail?id=579430\n  * electron.stderr.on('data', function (data) {\n  *  console.error('error', data.toString())\n  * })\n  */\n\n  // electron.stderr.on('data', function (data) {\n  //   console.error('error', data.toString())\n  // })\n\n  electron.stdout.on('data', function (data) {\n    console.log(data.toString())\n  })\n}\n\nmodule.exports = botGeneratorDev\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/botGenerator.js":"var Xvfb = require('xvfb')\nvar xvfb = new Xvfb()\nxvfb.startSync()\n\nconst spawn = require('electron-spawn')\n\nfunction botGenerator (seedScript) {\n  console.log('starting bot 🤖')\n  const electron = spawn(seedScript, {\n    detached: true\n  })\n  /**\n  * Because of a known bug in chromium, the following code prints a wall of errors.\n  * This should be uncommented when the issue is resolved. See here for details:\n  *   https://bugs.chromium.org/p/chromium/issues/detail?id=579430\n  * electron.stderr.on('data', function (data) {\n  *  console.error('error', data.toString())\n  * })\n  */\n\n  // electron.stderr.on('data', function (data) {\n  //   console.error('error', data.toString())\n  // })\n\n  electron.stdout.on('data', function (data) {\n    // ends xvfb process if bots stop\n\n    if (data.includes('going offline')) xvfb.stopSync()\n    console.log(data.toString())\n  })\n}\n\nmodule.exports = botGenerator\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/createSeedObj.js":"const cheerio = require('cheerio')\n\nfunction createSeedObj (htmlStrings, filesObj) {\n  const seedObj = {}\n\n  // each html file gets its own seed based off srcs found on filesObj\n  htmlStrings.map((html) => {\n    const pathArray = []\n    const srcArray = []\n\n    const $ = cheerio.load(html)\n    const $src = $('body').find('[src]')\n\n    // load seedArray with files to seed\n    $src.each((index, elem) => {\n      const src = $(elem).attr('src')\n\n      if (!filesObj[src]) return\n      if (pathArray.indexOf(src) < 0) pathArray.push(filesObj[src].path)\n      if (srcArray.indexOf(src) < 0) srcArray.push(src)\n    })\n\n    return [pathArray, srcArray]\n  }).forEach((array, index) => {\n    seedObj[index] = {\n      paths: array[0],\n      srcs: array[1]\n    }\n  })\n\n  return seedObj\n}\n\nmodule.exports = createSeedObj\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/hashSeedObj.js":"'use strict'\n\nconst _ = require('lodash')\nconst createTorrent = require('create-torrent')\nconst parseTorrent = require('parse-torrent')\n\nfunction hashSeedObj (seedObj) {\n  return new Promise((resolve, reject) => {\n    const hashObj = _.cloneDeep(seedObj)\n    const seedsArray = Object.keys(hashObj)\n\n    seedsArray.forEach(hashSeed)\n\n    function hashSeed (seed, index, array) {\n      createTorrent(hashObj[seed].paths, (err, torrent) => {\n        if (err) {\n          reject(err)\n          throw err\n        }\n\n        const tor = parseTorrent(torrent)\n        const hash = tor.infoHash\n        const filename = tor.files[0].name\n        const trackers = tor.announce.map((tracker) => {\n          return `tr=${tracker}`\n        }).join('&')\n\n        const magnetURI = `magnet:?xt=urn:btih:${hash}&dn=${filename}&${trackers}`\n\n        hashObj[seed].hash = hash\n        hashObj[seed].magnet = magnetURI\n\n        if (index === array.length - 1) {\n          resolve(hashObj)\n        }\n      })\n    }\n  })\n}\n\nmodule.exports = hashSeedObj\n","/home/travis/build/npmtest/node-npmtest-webflight/node_modules/webflight/lib/writeSeedScript.js":"'use strict'\n\nconst fs = require('fs')\n\nfunction writeSeedScript (output, url, stopCount, seedObj) {\n  const seedsArray = Object.keys(seedObj).map((seed) => seedObj[seed].paths)\n\n  let totalSeeds = 0\n  let jsString = 'var http = require(\\'http\\');\\n' +\n    'var WebTorrent = require(\\'webtorrent\\');\\n' +\n    'var client = new WebTorrent();'\n\n  seedsArray.forEach((seed) => {\n    totalSeeds++\n    jsString += `\n\nclient.seed('[${seed}]', function(torrent) {\n  --totalSeeds;\n\n  console.log('🐣 ', torrent.files.map((file) => file.name).slice(2).join(', '), 'etc., now seeding at hash ', torrent.infoHash);\n\n  if (!totalSeeds) console.log('🕊 all seeds active')\n});\n\n`\n  })\n\n  jsString += 'console.log(\\'⌛️ \\', \\'waiting on \\', totalSeeds, \\' seeds...\\');'\n  jsString += `\nsetInterval(function() {\n  http.get('${url}/count.check.4wf', function(response) {\n    response.on('data', function(data) {\n      data = JSON.parse(data);\n\n      if (data.count < ${stopCount}) {\n        console.log('😴 bots going offline')\n        http.get('${url}/bots.no.longer.seeding.4wf')\n        require('remote').require('app').quit()\n      }\n    });\n  });\n}, 600000);\n\n`\n\n  jsString = `var totalSeeds = ${totalSeeds};` + '\\n' + jsString\n\n  fs.writeFileSync(output, jsString, 'utf8')\n\n  return seedObj\n}\n\nmodule.exports = writeSeedScript\n"}